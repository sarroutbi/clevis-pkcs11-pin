#!/bin/bash
. clevis-luks-common-functions
. clevis-pkcs11-common

pkcs11_device=""

get_pkcs11_error() {
    if journalctl -u clevis-luks-pkcs11-askpass.service -b 0 | tail -3 \
      | egrep -E "A TPM2 device.{1,}needed" >/dev/null 2>&1;
    then
        echo "ERROR:TPM2 device not found. "
    elif journalctl -u clevis-luks-pkcs11-askpass.service -b 0 | tail -3 \
      | egrep -E "Error.{1,}server" >/dev/null 2>&1;
    then
        echo "ERROR:Tang communication error. "
    elif journalctl -u clevis-luks-pkcs11-askpass.service -b 0 | tail -3 \
      | grep "Invalid PIN" >/dev/null 2>&1;
    then
        echo "ERROR:Invalid PIN. "
    else
        echo "ERROR:Unknown error. "
    fi
    return 0
}

if command -v pcscd; then
    echo "clevis-pkcs11: starting pcscd if not available ..."
    PCSCD_PID=$(ps auxf | grep "[p]cscd")
    echo -e "clevis-pkcs11: pcscd running?:[${PCSCD_PID}]\n"
    if ! ps auxf | grep "[p]cscd";
    then
        echo "clevis-pkcs11: starting pcscd ..."
        pcscd --disable-polkit
    fi
fi

pkcs11-tool -L
if ! pkcs11_device=$(pkcs11-tool -L | grep "Slot" | head -1 | awk -F ":" '{print $2}' | sed -e 's@^ *@@g'); then
    echo "No PKCS11 device detected / pkcs11-tool error"
    exit 1
fi

while [ -z "${pkcs11_device}" ]; do
    option=$(systemd-ask-password --echo "Detected an empty PKCS#11 device, continue PKCS#11 detection? [yY/nN]")
    if [ "${option}" == "N" ] || [ "${option}" == "n" ] ; then
        echo "Won't continue PKCS11 device detection"
        exit 1
    fi
    pkcs11_device=$(pkcs11-tool -L | grep "Slot" | head -1 | awk -F ":" '{print $2}' | sed -e 's@^ *@@g')
done
echo "Detected PKCS11 device:${pkcs11_device}"

devices_array=()
# Let's analyze all entries from /etc/crypttab that contain clevis-pkcs11.sock entries
while read -r line;
do
    if echo "${line}" | grep -E "clevis-pkcs11.sock" 1>/dev/null;
    then
        next_device=0
        msg=""
        while [ ${next_device} -ne 1 ]; do
            uuid=$(echo "${line}" | awk '{print $2}')
            systemd_device=$(echo "${line}" | awk '{print $1}')
            if ! mapped_device=$(clevis_map_device "${uuid}"); then
                echo "Could not check mapped device for UID:${uuid}"
                next_device=1
                continue
            fi
            # If no PKCS#11 configuration, advance to next device
            if ! clevis luks list -d "${mapped_device}" | grep pkcs11 >/dev/null 2>&1; then
                echo "Device:${mapped_device} does not contain PKCS#11 configuration"
                next_device=1
                continue
            fi
            # Check if configuration contains a pin
            uri=$(clevis luks list -d "${mapped_device}" | awk -F '"uri":' '{print $2}' | awk -F '"' '{print $2}' | awk -F '"' '{print $1}')
            if ! model=$(clevis_get_model_from_uri "${uri}"); then
                model=${pkcs11_device}
            fi
            if ! pin=$(clevis_get_pin_value_from_uri "${uri}"); then
                pin=$(systemd-ask-password "${msg}Please, insert PIN for ${model} (${uuid}):")
            fi
            # Get key from PKCS11 pin here and feed AF_UNIX socket program
            echo "${pin}" > /run/systemd/clevis-pkcs11.pin
            if ! passphrase=$(clevis_luks_unlock_device "${mapped_device}") || [ -z "${passphrase}" ]; then
                echo "Could not unlock device:${mapped_device}"
                msg="$(get_pkcs11_error)"
                continue
            fi
            next_device=1
            echo "Device:${mapped_device} unlocked successfully by clevis"
            # Store passphrases to send to control socket
            devices_array+=("${systemd_device},${passphrase}")
        done
    fi
done < <(grep -v "^#" /etc/crypttab)

# Send passphrases to control socket
for ((ix=${#devices_array[*]}-1; ix>=0; ix--))
do
    echo "Sending [${ix}]: ${devices_array[$ix]} to systemd-cryptsetup"
    echo -n "${devices_array[$ix]}" | socat UNIX-CONNECT:/run/systemd/clevis-pkcs11.control.sock -
done
