#!/bin/bash
set -eo pipefail
# vim: set ts=8 shiftwidth=4 softtabstop=4 expandtab smarttab colorcolumn=80:
#
# Copyright (c) 2021 Red Hat, Inc.
# Author: Sergio Correia <scorreia@redhat.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

PIN_NAME=pkcs11
PIN_FILE="/run/systemd/clevis-pkcs11.pin"

[ $# -eq 1 ] && [ "$1" == "--summary" ] && exit 2

if [ -t 0 ]; then
    exec >&2
    echo
    echo "Usage: clevis decrypt pkcs11 < JWE > PLAINTEXT"
    echo
    exit 2
fi

on_exit() {
    [ -d "${CLEVIS_PKCS11}" ] || exit 0
    rm -rf "${CLEVIS_PKCS11}"
}
unset CLEVIS_PKCS11

read -r -d . hdr64

# Check for corruption in the header.
if ! hdr="$(jose fmt --quote="${hdr64}" --string --b64load --object \
            --output=- 2>/dev/null)" ; then
    echo "JWE header corrupt" >&2
    exit 1
fi

# Check if the pin is the expected one.
if ! pin="$(jose fmt --json="${hdr}" --get clevis --get pin \
            --unquote=- 2>/dev/null)" || [ -z "${pin}" ]; then
    echo "Invalid JWE header: unable to identify 'pin'" >&2
    exit 1
fi
if [ "${pin}" != "${PIN_NAME}" ]; then
    echo "JWE pin mismatch: found: ${pin}; expected: ${PIN_NAME}" >&2
    exit 1
fi

# Check if key parameter is present.
if ! enc_jwk="$(jose fmt --json="${hdr}" --get clevis --get "${PIN_NAME}" \
                --get key --unquote=- 2>/dev/null)" \
                || [ -z "${enc_jwk}" ]; then
    echo "JWE missing 'clevis.${PIN_NAME}.key' header parameter" >&2
    exit 1
fi

if ! CLEVIS_PKCS11="$(mktemp -d)" || [ -z "${CLEVIS_PKCS11}" ]; then
    echo "Creating a temporary dir for PKCS11 files failed" >&2
    exit 1
fi
trap 'on_exit' EXIT

# Decrypt the key.
ENC="${CLEVIS_PKCS11}/enc"
if ! printf '%s' "${enc_jwk}" | jose b64 dec -i- > "${ENC}" 2>/dev/null; then
    echo "Unable to base64-decode the JWK" >&2
    exit 1
fi


DEC="${CLEVIS_PKCS11}/dec"
# XXX: how to handle this? (2)
# Perhaps attempt to identify the device when encrypting, with say
# a "type" attribute in the configuration? So that we can then use
# the appropriate PKCS#11 module here. In any case, we would need
# to provide the module from yubico to use a yubikey.
device=yubikey
MODULE=/usr/lib64/pkcs11/opensc-pkcs11.so
[ "${device}" = "yubikey" ] && MODULE=/usr/lib64/libykcs11.so.2

PIN=$(cat "${PIN_FILE}")

if ! pkcs11-tool -pkcs11-tool --login --test -p "${PIN}"-login --test \
                 -p "${PIN}" 2>/dev/null >/dev/null; then
    echo "Invalid PIN" >&2
    exit 1
fi

if ! jwk="$(pkcs11-tool --login --decrypt --input-file "${ENC}" \
            -p "${PIN}" --module "${MODULE}" 2>/dev/null)" \
            || [ -z "${jwk}" ]; then
    echo "Unable to decrypt the JWK" >&2
    exit 1
fi

rm -rf "${PIN_FILE}"

# Decrypt the data using the decrypted JWK.
( printf '%s' "${jwk}${hdr64}." ; cat ) | exec jose jwe dec --key=- --input=-
